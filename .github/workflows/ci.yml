name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install 'git+https://github.com/facebookresearch/detectron2.git'
    
    - name: Run black
      run: black --check .
    
    - name: Run isort
      run: isort --check-only .
    
    - name: Run flake8
      run: flake8 . > artifacts/flake8_report.txt || true
    
    - name: Run mypy
      run: mypy src/ > artifacts/mypy_report.txt || true
    
    - name: Upload lint reports
      uses: actions/upload-artifact@v3
      with:
        name: lint-reports
        path: artifacts/

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install 'git+https://github.com/facebookresearch/detectron2.git'
    
    - name: Create directories
      run: |
        mkdir -p artifacts
        mkdir -p data/synthetic/images
    
    - name: Generate synthetic data
      run: python src/data/generate_synthetic_data.py
    
    - name: Run tests
      run: pytest --cov=src --cov-report=xml -q > artifacts/pytest_report.txt
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          artifacts/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  smoke-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install 'git+https://github.com/facebookresearch/detectron2.git'
    
    - name: Create directories
      run: |
        mkdir -p artifacts
        mkdir -p data/synthetic/images
    
    - name: Generate synthetic data
      run: python src/data/generate_synthetic_data.py
    
    - name: Smoke training run
      run: |
        python src/train.py --config configs/mask_rcnn_atc.yaml --epochs 1 --output-dir artifacts/
        mv artifacts/model_final.pth artifacts/model.pt
    
    - name: Smoke inference run
      run: python src/inference.py --model artifacts/model.pt --images data/synthetic/images/ --output artifacts/inference_outputs.json
    
    - name: Export models
      run: python scripts/export_model.py
    
    - name: Verify exports
      run: python scripts/verify_export.py
    
    - name: Validate COCO annotations
      run: python -c "
import json
from pycocotools.coco import COCO
coco = COCO('data/synthetic/annotations.json')
print('COCO validation successful')
print(f'Images: {len(coco.imgs)}')
print(f'Annotations: {len(coco.anns)}')
print(f'Categories: {len(coco.cats)}')
" > artifacts/coco_validation.txt
    
    - name: Upload smoke test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: smoke-test-artifacts
        path: artifacts/

  docker-build:
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: atc-cattle-buffalo:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name atc-test -p 8501:8501 atc-cattle-buffalo:latest
        sleep 30
        curl -f http://localhost:8501/_stcore/health || exit 1
        docker stop atc-test

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: echo "Deployment would happen here"
